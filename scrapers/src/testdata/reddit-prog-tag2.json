{"kind": "Listing", "data": {"after": "t3_zu4hgx", "dist": 10, "modhash": "", "geo_filter": null, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_12x6uz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Media] Why are sized integers (signed and unsigned) planned to be deprecated?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 36, "top_awarded_type": null, "hide_score": false, "name": "t3_zu6p2o", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 152, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": true, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 152, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "image", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "image", "content_categories": null, "is_self": false, "mod_note": null, "created": 1671875447.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "i.redd.it", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://i.redd.it/c0lygmmjit7a1.png", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://preview.redd.it/c0lygmmjit7a1.png?auto=webp&amp;s=d45a1bba7b853e870428b02a3276584e8db7629a", "width": 708, "height": 187}, "resolutions": [{"url": "https://preview.redd.it/c0lygmmjit7a1.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=2f6dd371088d9e450522e59b449a92ad8eb66f0d", "width": 108, "height": 28}, {"url": "https://preview.redd.it/c0lygmmjit7a1.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=2da13d9121a31deed77d81f8d26eeb57ca69fc8a", "width": 216, "height": 57}, {"url": "https://preview.redd.it/c0lygmmjit7a1.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=8c939c2b84ce4eda8f8b3e759bbfd3067b025125", "width": 320, "height": 84}, {"url": "https://preview.redd.it/c0lygmmjit7a1.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=e2696c61f099d29655dc5bf43e3733b6ca9a130f", "width": 640, "height": 169}], "variants": {}, "id": "6yIEysyun-n9gb1tY7CvrVBJp5JGbh_HWDB3VkVjoGc"}], "enabled": true}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "zu6p2o", "is_robot_indexable": true, "report_reasons": null, "author": "turtle_13", "discussion_type": null, "num_comments": 35, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/zu6p2o/media_why_are_sized_integers_signed_and_unsigned/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://i.redd.it/c0lygmmjit7a1.png", "subreddit_subscribers": 213133, "created_utc": 1671875447.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "javascript", "selftext": "", "author_fullname": "t2_94cspxtu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Just learnt about Scheduler API. Looks like a fine grained control to manage long running tasks", "link_flair_richtext": [], "subreddit_name_prefixed": "r/javascript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 89, "top_awarded_type": null, "hide_score": false, "name": "t3_zu473n", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "public", "ups": 113, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 113, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1671865229.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "web.dev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://web.dev/optimize-long-tasks/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/bhU8Y-4GFsOQd7c1OZF2rCs4rM9NoQSJ7gM4UYCf4BA.jpg?auto=webp&amp;s=f3aa18d91a01448e88f11465672582b39010bd50", "width": 752, "height": 480}, "resolutions": [{"url": "https://external-preview.redd.it/bhU8Y-4GFsOQd7c1OZF2rCs4rM9NoQSJ7gM4UYCf4BA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6edbf9e7c5461b0db53476a81c521aa07502bd17", "width": 108, "height": 68}, {"url": "https://external-preview.redd.it/bhU8Y-4GFsOQd7c1OZF2rCs4rM9NoQSJ7gM4UYCf4BA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2b482c80bb90a23b96d5f7546116feb941d2bb33", "width": 216, "height": 137}, {"url": "https://external-preview.redd.it/bhU8Y-4GFsOQd7c1OZF2rCs4rM9NoQSJ7gM4UYCf4BA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=6d720fea67da00fe5298d019c689837395134fc9", "width": 320, "height": 204}, {"url": "https://external-preview.redd.it/bhU8Y-4GFsOQd7c1OZF2rCs4rM9NoQSJ7gM4UYCf4BA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=0dd4a6267e27985a88594948d9595fb4202584fc", "width": 640, "height": 408}], "variants": {}, "id": "70v4U9K-A-rkxl71Eqh56xHhMnX1Rv4E5LtuYBf-SHk"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh30", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "zu473n", "is_robot_indexable": true, "report_reasons": null, "author": "bvjebin", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/javascript/comments/zu473n/just_learnt_about_scheduler_api_looks_like_a_fine/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://web.dev/optimize-long-tasks/", "subreddit_subscribers": 2281139, "created_utc": 1671865229.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ld9mg", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Slashbase: The open-source in-browser database IDE &amp; CLI for your dev/data workflows written in Golang. Supports: PostgreSQL &amp; MongoDB.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": 70, "top_awarded_type": null, "hide_score": false, "name": "t3_zubf7l", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.88, "author_flair_background_color": null, "ups": 18, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "show &amp; tell", "can_mod_post": false, "score": 18, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/ADVX6POWCgLZLXdaRnwMtBvfe9XTrqF-rETFt2iUAJY.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "subreddit_type": "public", "created": 1671893821.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": "new", "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/slashbaseide/slashbase", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/zAWRkj7Q8vJQFGJs8tGWoe0TZXjmzaUylDyTN_oykqw.jpg?auto=webp&amp;s=5f04a4ba250c5a73514778d50c0a40abe2055e73", "width": 1280, "height": 640}, "resolutions": [{"url": "https://external-preview.redd.it/zAWRkj7Q8vJQFGJs8tGWoe0TZXjmzaUylDyTN_oykqw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=40daa7dd1f64523c50bab0985e398b195e5e19ac", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/zAWRkj7Q8vJQFGJs8tGWoe0TZXjmzaUylDyTN_oykqw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=9b8eba13b78a29db7cd54fe6a4372f225176cc5b", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/zAWRkj7Q8vJQFGJs8tGWoe0TZXjmzaUylDyTN_oykqw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=0513fbcdf3377954f2f551ef7853b4784247abcb", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/zAWRkj7Q8vJQFGJs8tGWoe0TZXjmzaUylDyTN_oykqw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=07a2d080bc1ac004d99fffab087cc82510633b93", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/zAWRkj7Q8vJQFGJs8tGWoe0TZXjmzaUylDyTN_oykqw.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=c8d3cac7a46c2de350754b866b4dc8b5f0f566e4", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/zAWRkj7Q8vJQFGJs8tGWoe0TZXjmzaUylDyTN_oykqw.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=a253dbbac7281a8ce721a7e6fcfca0de1d21e2c4", "width": 1080, "height": 540}], "variants": {}, "id": "2GPSpCncQ_gflrQSqpAGtEGusRy05dYWMcx1NOxs6jg"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "8e5426fe-a6bd-11ec-a6a4-1ed4e247a1dd", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "mod_note": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "num_reports": null, "removal_reason": null, "link_flair_background_color": "#7193ff", "id": "zubf7l", "is_robot_indexable": true, "report_reasons": null, "author": "davecoolgood", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/zubf7l/slashbase_the_opensource_inbrowser_database_ide/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/slashbaseide/slashbase", "subreddit_subscribers": 195923, "created_utc": 1671893821.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Compilers", "selftext": "Hi, I am trying to generate code for conditional statements e.g. \n\n    d = (a &gt; b &amp;&amp; a &gt; c) || (a &lt; b &amp;&amp; a == c);\n\n but I am struggling to see how to break this down and generate assembly for it. By decompiling this code in gcc I can see that the left most expression \n\n    (a &gt; b &amp;&amp; a &gt; c)\n\nis created with a JLE and then JG command but this can change depending on the other operations that follow. It seems to me like each operation needs to have knowledege of the following operations in order to generate the correct series of comparisons and jumps.  Is there a standard algorithm/method for evaluating these kinds of expressions?", "author_fullname": "t2_cnuav", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Generating assembly for complex logical expressions", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Compilers", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_zubxzk", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1671895615.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1671895431.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Compilers", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I am trying to generate code for conditional statements e.g. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;d = (a &amp;gt; b &amp;amp;&amp;amp; a &amp;gt; c) || (a &amp;lt; b &amp;amp;&amp;amp; a == c);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but I am struggling to see how to break this down and generate assembly for it. By decompiling this code in gcc I can see that the left most expression &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(a &amp;gt; b &amp;amp;&amp;amp; a &amp;gt; c)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is created with a JLE and then JG command but this can change depending on the other operations that follow. It seems to me like each operation needs to have knowledege of the following operations in order to generate the correct series of comparisons and jumps.  Is there a standard algorithm/method for evaluating these kinds of expressions?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qrgl", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "zubxzk", "is_robot_indexable": true, "report_reasons": null, "author": "H3XAGON_", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Compilers/comments/zubxzk/generating_assembly_for_complex_logical/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Compilers/comments/zubxzk/generating_assembly_for_complex_logical/", "subreddit_subscribers": 13154, "created_utc": 1671895431.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_k39rbtu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A taste of pavex, an upcoming Rust web framework", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_zublfw", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": "", "subreddit_type": "public", "ups": 42, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 42, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1671894349.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "lpalmieri.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.lpalmieri.com/posts/a-taste-of-pavex-rust-web-framework/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/U-MlGhaEujT-8_K0N2ppiCWsvdUDKQmW9fylkYBdyQI.jpg?auto=webp&amp;s=057a78978d916fa55b58c69c51c68922d19bba0a", "width": 200, "height": 200}, "resolutions": [{"url": "https://external-preview.redd.it/U-MlGhaEujT-8_K0N2ppiCWsvdUDKQmW9fylkYBdyQI.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=028762372e13d005e35c1229875b2f83bbdf35c9", "width": 108, "height": 108}], "variants": {}, "id": "LkN0ZqY5-4JBH911DUj455Ubc8YMO084kc_UnYsTMXk"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "zero2prod \u00b7 wiremock \u00b7 linfa \u00b7 ndarray-stats", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "zublfw", "is_robot_indexable": true, "report_reasons": null, "author": "LukeMathWalker", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/zublfw/a_taste_of_pavex_an_upcoming_rust_web_framework/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.lpalmieri.com/posts/a-taste-of-pavex-rust-web-framework/", "subreddit_subscribers": 213133, "created_utc": 1671894349.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I'm a big fan of [https://lib.rs/](https://lib.rs/), I'm getting an HTTP 504 trying to visit presently. I haven't been in a few days, has something happened to it? Maybe server just needs a kick?", "author_fullname": "t2_13vnc1", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is Lib.rs down for y'all?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_zuc56s", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1671896042.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m a big fan of &lt;a href=\"https://lib.rs/\"&gt;https://lib.rs/&lt;/a&gt;, I&amp;#39;m getting an HTTP 504 trying to visit presently. I haven&amp;#39;t been in a few days, has something happened to it? Maybe server just needs a kick?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/S8r0WSzVUt-RlL2q2L75T9nmBe4RkLgILavzjof9bgs.jpg?auto=webp&amp;s=bcb400738c859446d90ae4fd7b5e0619ec1c7252", "width": 256, "height": 256}, "resolutions": [{"url": "https://external-preview.redd.it/S8r0WSzVUt-RlL2q2L75T9nmBe4RkLgILavzjof9bgs.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=baa61278fdb9d74632f57df4065ca43b84d1c976", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/S8r0WSzVUt-RlL2q2L75T9nmBe4RkLgILavzjof9bgs.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=da78651028d5036de570a9f3dc2a11020dd32aad", "width": 216, "height": 216}], "variants": {}, "id": "eaLVrBN-UjE5l_rdwQjdhe0nJokBIc93Uh1SfV0SR6I"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "zuc56s", "is_robot_indexable": true, "report_reasons": null, "author": "fdsafdsafdsafdaasdf", "discussion_type": null, "num_comments": 15, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/zuc56s/is_librs_down_for_yall/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/zuc56s/is_librs_down_for_yall/", "subreddit_subscribers": 213133, "created_utc": 1671896042.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi!\n\nI'm looking to build a game server that uses web sockets to communicate with clients, I've looked into some of the libraries and the main ones seem to be [gorilla websockets](https://github.com/gorilla/websocket) and [melody](https://github.com/olahol/melody).\n\nI'm wondering if anyone has any experience or recommendations for choosing between these two? Thanks!", "author_fullname": "t2_408liqov", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Gorilla/websocket or Melody?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_zu80o0", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.73, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "discussion", "can_mod_post": false, "score": 7, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1671881245.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi!&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m looking to build a game server that uses web sockets to communicate with clients, I&amp;#39;ve looked into some of the libraries and the main ones seem to be &lt;a href=\"https://github.com/gorilla/websocket\"&gt;gorilla websockets&lt;/a&gt; and &lt;a href=\"https://github.com/olahol/melody\"&gt;melody&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m wondering if anyone has any experience or recommendations for choosing between these two? Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/cmYKeikLIfZK_60azOcm-2iVsyTIH-dg2H_KajG_aS8.jpg?auto=webp&amp;s=9307139ae60210a3d814576371163a601ae849f9", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/cmYKeikLIfZK_60azOcm-2iVsyTIH-dg2H_KajG_aS8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=52758437299fe7f6cd679df343747684f916b27a", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/cmYKeikLIfZK_60azOcm-2iVsyTIH-dg2H_KajG_aS8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=73915e60e6d6713c2e46a2a6bf58e2b4ae08a886", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/cmYKeikLIfZK_60azOcm-2iVsyTIH-dg2H_KajG_aS8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=fc707be69794a858be0d6a72c7f83aa65f2dc89e", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/cmYKeikLIfZK_60azOcm-2iVsyTIH-dg2H_KajG_aS8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=0b38ae592e737777fc82a186e26a02591b06c667", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/cmYKeikLIfZK_60azOcm-2iVsyTIH-dg2H_KajG_aS8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=db7e4afe3a8a30c998134e61009fac802ca2fa5f", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/cmYKeikLIfZK_60azOcm-2iVsyTIH-dg2H_KajG_aS8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=2d841836658fb70ea5a90d6bcf8934a319e3d41a", "width": 1080, "height": 540}], "variants": {}, "id": "DKMEa3GCZjHq1sqQsPywY-PsvQOGHEUHGmaq6dbuR3I"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "9e5210de-a6bd-11ec-91c2-421ae0601829", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#46d160", "id": "zu80o0", "is_robot_indexable": true, "report_reasons": null, "author": "GuyTorbet", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/zu80o0/gorillawebsocket_or_melody/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/zu80o0/gorillawebsocket_or_melody/", "subreddit_subscribers": 195923, "created_utc": 1671881245.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Python is okay but every time I want to build something cool, it feels really slow. Whether it\u2019s a web scraper or like right now I\u2019m trying to bulk transcribe with OpenAI\u2019s Whisper and it always feels like the longer a Python program runs, the slower it gets. \n\nI\u2019ve been sitting here for hours wondering why OpenAI didn\u2019t make Go an option for Whisper. \n\nThere\u2019s even a little debate about this in the Python community. It seems people feel building quickly is better than faster runtimes. Not sure if I agree. \n\nAnyone else wish Go was used more for AI/ML?", "author_fullname": "t2_g1hkj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why isn\u2019t Go used in AI/ML?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ztv0by", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.76, "author_flair_background_color": null, "subreddit_type": "public", "ups": 48, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "discussion", "can_mod_post": false, "score": 48, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1671835880.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Python is okay but every time I want to build something cool, it feels really slow. Whether it\u2019s a web scraper or like right now I\u2019m trying to bulk transcribe with OpenAI\u2019s Whisper and it always feels like the longer a Python program runs, the slower it gets. &lt;/p&gt;\n\n&lt;p&gt;I\u2019ve been sitting here for hours wondering why OpenAI didn\u2019t make Go an option for Whisper. &lt;/p&gt;\n\n&lt;p&gt;There\u2019s even a little debate about this in the Python community. It seems people feel building quickly is better than faster runtimes. Not sure if I agree. &lt;/p&gt;\n\n&lt;p&gt;Anyone else wish Go was used more for AI/ML?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "9e5210de-a6bd-11ec-91c2-421ae0601829", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#46d160", "id": "ztv0by", "is_robot_indexable": true, "report_reasons": null, "author": "renegadellama", "discussion_type": null, "num_comments": 68, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/ztv0by/why_isnt_go_used_in_aiml/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/ztv0by/why_isnt_go_used_in_aiml/", "subreddit_subscribers": 195923, "created_utc": 1671835880.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "**Background:**\n\n* Backends for Frontends (aka BFF, Multiple API Gateways Supergraphs)\n* API Gateways implemented using WunderGraph (Apollo Federation)\n* These BFFs  connect to the necessary (Subgraphs/Microservice)\n* Subgraphs and Microservice are on same instance (single Lambda or Server)\n* Supergraph  to Subgraph communication needs to be JSON I think.\n* Subgraph to Subgraph (aka inter microservice communication) will be gRPC.\n\nWith all this in mind. What is the best file structure?\n\nWhat do you think of this hexagonal architecture for each microservice? I am assuming I will have a gRPC and GraphQL folders in the handlers folder. Better name might be delivery.\n\n[https://medium.com/@matiasvarela/hexagonal-architecture-in-go-cfd4e436faa3](https://medium.com/@matiasvarela/hexagonal-architecture-in-go-cfd4e436faa3)", "author_fullname": "t2_tnvqflon", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Best CRUD File Structure for Microservice using GraphQL + gRPC?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_zuc5nw", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1671896088.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Background:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Backends for Frontends (aka BFF, Multiple API Gateways Supergraphs)&lt;/li&gt;\n&lt;li&gt;API Gateways implemented using WunderGraph (Apollo Federation)&lt;/li&gt;\n&lt;li&gt;These BFFs  connect to the necessary (Subgraphs/Microservice)&lt;/li&gt;\n&lt;li&gt;Subgraphs and Microservice are on same instance (single Lambda or Server)&lt;/li&gt;\n&lt;li&gt;Supergraph  to Subgraph communication needs to be JSON I think.&lt;/li&gt;\n&lt;li&gt;Subgraph to Subgraph (aka inter microservice communication) will be gRPC.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;With all this in mind. What is the best file structure?&lt;/p&gt;\n\n&lt;p&gt;What do you think of this hexagonal architecture for each microservice? I am assuming I will have a gRPC and GraphQL folders in the handlers folder. Better name might be delivery.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://medium.com/@matiasvarela/hexagonal-architecture-in-go-cfd4e436faa3\"&gt;https://medium.com/@matiasvarela/hexagonal-architecture-in-go-cfd4e436faa3&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/nvqLZfqqSnqNluxbdE4zEjKikI-klO0lGfKR_jmuSTY.jpg?auto=webp&amp;s=502ecd55e6803b642254e58a35ce921bb1919670", "width": 960, "height": 540}, "resolutions": [{"url": "https://external-preview.redd.it/nvqLZfqqSnqNluxbdE4zEjKikI-klO0lGfKR_jmuSTY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=58a19f45b33f6fa6087bc4f42a28a33d7e299ef3", "width": 108, "height": 60}, {"url": "https://external-preview.redd.it/nvqLZfqqSnqNluxbdE4zEjKikI-klO0lGfKR_jmuSTY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d6d56d6ad3a43189d72e05bc1c3e7b3218b3eabc", "width": 216, "height": 121}, {"url": "https://external-preview.redd.it/nvqLZfqqSnqNluxbdE4zEjKikI-klO0lGfKR_jmuSTY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=64ff520c04a293d9aba9fa5e59757d65a2665e49", "width": 320, "height": 180}, {"url": "https://external-preview.redd.it/nvqLZfqqSnqNluxbdE4zEjKikI-klO0lGfKR_jmuSTY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=5dffa5b1cf6e9f452f29424f9515f23b8f35d26c", "width": 640, "height": 360}, {"url": "https://external-preview.redd.it/nvqLZfqqSnqNluxbdE4zEjKikI-klO0lGfKR_jmuSTY.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=a1b8622aaf38bb2aacbc4454d19b83f53875bb1e", "width": 960, "height": 540}], "variants": {}, "id": "YIcuhpouGDiUPLhTsGMuQjXLXRudFD8b9V8GKZ07Z2w"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "zuc5nw", "is_robot_indexable": true, "report_reasons": null, "author": "throwawaymangayo", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/zuc5nw/best_crud_file_structure_for_microservice_using/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/zuc5nw/best_crud_file_structure_for_microservice_using/", "subreddit_subscribers": 195923, "created_utc": 1671896088.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hi, I'm playing around with atomics and have some questions about memory orderings, particularly relaxed.\n\n## Single-threaded\n\n```rust\nfn main() {\n    let atomic = AtomicUsize::new(0);\n    let old_value = atomic.fetch_add(1, Relaxed);\n    assert_eq!(old_value, 0);\n    let value = atomic.load(Relaxed);\n    assert_eq!(value, 1);\n}\n```\nWill this succeed?\n\nReading the [nomicon](https://doc.rust-lang.org/nomicon/atomics.html):\n&gt; Relaxed accesses are the absolute weakest. They can be freely re-ordered and provide no happens-before relationship.\n\nIt sounds like this may fail.\n\nBut reading [this](https://cfsamsonbooks.gitbook.io/explaining-atomics-in-rust/):\n&gt; Relaxed memory ordering on atomics will prevent the compiler from reordering these instructions themselves, but on weakly ordered CPUs, it might reorder all other memory accesses.\n\nMakes it sound like it should succeed.\n\n## Multi-threaded\n\nI'm implementing threads for an operating system and am unsure about the memory synchronisation required.\n\n```rust\nfn main() {\n    static ATOMIC: AtomicUsize = AtomicUsize::new(0);\n\n    // a\n    {\n        let old_value = ATOMIC.fetch_add(1, Relaxed);\n        assert_eq!(old_value, 0);\n    }\n\n    fence(Release);\n\n    // b\n    {\n        spawn(|| {\n            let old_value = ATOMIC.fetch_add(1, Relaxed);\n            assert_eq!(old_value, 1);\n        })\n        .join();\n    }\n\n    fence(Acquire);\n\n    // c\n    {\n        let value = ATOMIC.load(Relaxed);\n        assert_eq!(value, 2)\n    }\n}\n```\nThe `spawn` function isn't `std::thread::spawn` but a custom one that does not do any memory synchronisation.\n\nAFAICT this is correct as the release fence prevents `a` from being moved to after `b`, and the acquire fence prevents `c` from being moved to before `b`.\n\nIs it also necessary to include fences in the spawned closure in this example? i.e. `b`:\n```rust\n{\n    spawn(|| {\n        fence(Acquire);\n        let old_value = ATOMIC.fetch_add(1, Relaxed);\n        assert_eq!(old_value, 1);\n        fence(Release);\n    })\n    .join();\n}\n```\nIf not, are there any examples where fences in the spawned closure would be necessary?\n\nMy intuition says this example doesn't need them since every `fetch_add` is guaranteed to see a unique value, and the `fetch_add` in `a` must see `0` as it runs well before the spawn. But my intuition hasn't gotten me very far with atomics, so \ud83e\udd37.\n\nThe [C++ thread constructor docs](https://en.cppreference.com/w/cpp/thread/thread/thread) make it sound like there is a fence at the start of the spawned closure:\n&gt; The completion of the invocation of the constructor _synchronizes-with_ (as defined in [std::memory_order](https://en.cppreference.com/w/cpp/atomic/memory_order \"cpp/atomic/memory order\")) the beginning of the invocation of the copy of _f_ on the new thread of execution.\n\nAnd the [join docs](https://en.cppreference.com/w/cpp/thread/thread/join) suggest there isn't one at the end:\n&gt; No synchronization is performed on *this itself.\n\nThanks in advance for any answers.", "author_fullname": "t2_1f65k9z0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Thread creation and joining memory synchronisation", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_zu4hgx", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 22, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 22, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1671873990.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1671866350.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I&amp;#39;m playing around with atomics and have some questions about memory orderings, particularly relaxed.&lt;/p&gt;\n\n&lt;h2&gt;Single-threaded&lt;/h2&gt;\n\n&lt;p&gt;&lt;code&gt;rust\nfn main() {\n    let atomic = AtomicUsize::new(0);\n    let old_value = atomic.fetch_add(1, Relaxed);\n    assert_eq!(old_value, 0);\n    let value = atomic.load(Relaxed);\n    assert_eq!(value, 1);\n}\n&lt;/code&gt;\nWill this succeed?&lt;/p&gt;\n\n&lt;p&gt;Reading the &lt;a href=\"https://doc.rust-lang.org/nomicon/atomics.html\"&gt;nomicon&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Relaxed accesses are the absolute weakest. They can be freely re-ordered and provide no happens-before relationship.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;It sounds like this may fail.&lt;/p&gt;\n\n&lt;p&gt;But reading &lt;a href=\"https://cfsamsonbooks.gitbook.io/explaining-atomics-in-rust/\"&gt;this&lt;/a&gt;:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Relaxed memory ordering on atomics will prevent the compiler from reordering these instructions themselves, but on weakly ordered CPUs, it might reorder all other memory accesses.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Makes it sound like it should succeed.&lt;/p&gt;\n\n&lt;h2&gt;Multi-threaded&lt;/h2&gt;\n\n&lt;p&gt;I&amp;#39;m implementing threads for an operating system and am unsure about the memory synchronisation required.&lt;/p&gt;\n\n&lt;p&gt;```rust\nfn main() {\n    static ATOMIC: AtomicUsize = AtomicUsize::new(0);&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// a\n{\n    let old_value = ATOMIC.fetch_add(1, Relaxed);\n    assert_eq!(old_value, 0);\n}\n\nfence(Release);\n\n// b\n{\n    spawn(|| {\n        let old_value = ATOMIC.fetch_add(1, Relaxed);\n        assert_eq!(old_value, 1);\n    })\n    .join();\n}\n\nfence(Acquire);\n\n// c\n{\n    let value = ATOMIC.load(Relaxed);\n    assert_eq!(value, 2)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}\n``&lt;code&gt;\nThe&lt;/code&gt;spawn&lt;code&gt;function isn&amp;#39;t&lt;/code&gt;std::thread::spawn` but a custom one that does not do any memory synchronisation.&lt;/p&gt;\n\n&lt;p&gt;AFAICT this is correct as the release fence prevents &lt;code&gt;a&lt;/code&gt; from being moved to after &lt;code&gt;b&lt;/code&gt;, and the acquire fence prevents &lt;code&gt;c&lt;/code&gt; from being moved to before &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Is it also necessary to include fences in the spawned closure in this example? i.e. &lt;code&gt;b&lt;/code&gt;:\n&lt;code&gt;rust\n{\n    spawn(|| {\n        fence(Acquire);\n        let old_value = ATOMIC.fetch_add(1, Relaxed);\n        assert_eq!(old_value, 1);\n        fence(Release);\n    })\n    .join();\n}\n&lt;/code&gt;\nIf not, are there any examples where fences in the spawned closure would be necessary?&lt;/p&gt;\n\n&lt;p&gt;My intuition says this example doesn&amp;#39;t need them since every &lt;code&gt;fetch_add&lt;/code&gt; is guaranteed to see a unique value, and the &lt;code&gt;fetch_add&lt;/code&gt; in &lt;code&gt;a&lt;/code&gt; must see &lt;code&gt;0&lt;/code&gt; as it runs well before the spawn. But my intuition hasn&amp;#39;t gotten me very far with atomics, so \ud83e\udd37.&lt;/p&gt;\n\n&lt;p&gt;The &lt;a href=\"https://en.cppreference.com/w/cpp/thread/thread/thread\"&gt;C++ thread constructor docs&lt;/a&gt; make it sound like there is a fence at the start of the spawned closure:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;The completion of the invocation of the constructor &lt;em&gt;synchronizes-with&lt;/em&gt; (as defined in &lt;a href=\"https://en.cppreference.com/w/cpp/atomic/memory_order\" title=\"cpp/atomic/memory order\"&gt;std::memory_order&lt;/a&gt;) the beginning of the invocation of the copy of &lt;em&gt;f&lt;/em&gt; on the new thread of execution.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And the &lt;a href=\"https://en.cppreference.com/w/cpp/thread/thread/join\"&gt;join docs&lt;/a&gt; suggest there isn&amp;#39;t one at the end:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;No synchronization is performed on *this itself.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Thanks in advance for any answers.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "zu4hgx", "is_robot_indexable": true, "report_reasons": null, "author": "TypicalFork", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/zu4hgx/thread_creation_and_joining_memory_synchronisation/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/zu4hgx/thread_creation_and_joining_memory_synchronisation/", "subreddit_subscribers": 213133, "created_utc": 1671866350.0, "num_crossposts": 0, "media": null, "is_video": false}}], "before": null}}